#version 120
const int numOfLights = 2;
varying vec2 UV;
varying vec3 color;
uniform sampler2D texture;


//added for lighting
varying vec3 fN_normal;
varying vec3 fE_position;
varying vec3 fL_lightPosition[numOfLights];
varying float w[numOfLights]; 

uniform vec4 AmbientProduct;
uniform vec4 DiffuseProduct;
uniform vec4 SpecularProduct;
uniform vec4 LightPosition[numOfLights];
uniform float Shininess;
uniform float constantAttenuation, linearAttenuation, quadraticAttenuation;
uniform float spotCutoff[numOfLights], spotExponent[numOfLights];
uniform vec3 spotDirection[numOfLights];
 
void main(void){
   vec4 finalLight = AmbientProduct; 
   
   //added for lighting
   //normalize the input lighting vectors
   vec3 N = normalize (fN_normal);
   vec3 E = normalize (fE_position);
   
   float attenuation = 1.0;

   for (int i = 0; i < numOfLights; i++){
		vec3 L = normalize (fL_lightPosition[i]);
          //setup the halfway vector
   		vec3 H = normalize (L + E);
	 
   				//point and spot light
   		if (w[i] != 0.0){
			//fl_light ->p2lightsrc
			float dis = length(fL_lightPosition[i]);
   			attenuation = 1.0 / (constantAttenuation + linearAttenuation * dis + quadraticAttenuation * dis * dis);
		
			if (spotCutoff[i] <= 90.0){//spotlight
				float clampedCosine = max(0.0, dot(-L, normalize(spotDirection[i])));
       			if (clampedCosine < cos(radians(spotCutoff[i]))){ // outside of spotlight cone?
					attenuation = 0.0;
        			} 
        			else{
           			attenuation = attenuation * pow(clampedCosine, spotExponent[i]);   
        			}
     		}
    		}
   
		float kd = max (dot(L, N), 0.0);
		vec4 diffuse = kd * attenuation * DiffuseProduct;

   		//float ks = pow(max(dot(N, H), 0.0), Shininess);	
		float ks = pow(max(0.0, dot(reflect(-L, N), E)), Shininess);
		vec4 specular = attenuation * SpecularProduct * ks;

   		//discard the specular highlight if lights behind the vertex
   		if (dot(L, N) < 0.0 )
     		specular = vec4(0.0, 0.0, 0.0, 1.0);
		finalLight = finalLight + diffuse + specular;
	}
	
	gl_FragColor = finalLight;
	gl_FragColor.a = 1.0;
	gl_FragColor *= vec4(color.rgb, 1.0) * texture2D(texture, UV);

}
